generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String    @id @default(cuid())
  username     String    @unique
  passwordHash String
  role         Role      @default(AUTHOR)
  avatarUrl    String?
  bio          String?
  displayName  String?
  posts        Post[]
  sessions     Session[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id              String     @id @default(cuid())
  slug            String     @unique
  title           String
  content         String     @db.Text
  published       Boolean    @default(false)
  metaTitle       String?
  metaDescription String?
  focusKeyword    String?
  ogTitle         String?
  ogDescription   String?
  canonicalUrl    String?
  noIndex         Boolean    @default(false)
  noFollow        Boolean    @default(false)
  schemaType      SchemaType?  @default(BlogPosting)
  publishedAt     DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  authorId        String
  featuredImageId String?    // Dihapus: @unique
  ogImageId       String?    // Dihapus: @unique
  viewCount       Int        @default(0)
  comments        Comment[]
  author          User       @relation(fields: [authorId], references: [id])
  featuredImage   Media?     @relation("PostFeaturedImage", fields: [featuredImageId], references: [id])
  ogImage         Media?     @relation("PostOgImage", fields: [ogImageId], references: [id])
  categories      Category[] @relation("CategoryToPost")
  tags            Tag[]      @relation("PostToTag")
}

model Category {
  id        String   @id @default(cuid())
  slug      String   @unique
  name      String   @unique
  updatedAt DateTime @updatedAt // Dihapus: @default(now())
  posts     Post[]   @relation("CategoryToPost")
}

model Tag {
  id        String   @id @default(cuid())
  slug      String   @unique
  name      String   @unique
  updatedAt DateTime @updatedAt // Dihapus: @default(now())
  posts     Post[]   @relation("PostToTag")
}

model Media {
  id                  String   @id @default(cuid())
  key                 String   @unique
  url                 String   @unique
  url_medium          String?
  url_thumb           String?
  url_placeholder     String?
  altText             String?
  fileType            String
  size                Int
  createdAt           DateTime @default(now())
  filename            String?  // Untuk menyimpan nama file asli
  title               String?  // Judul untuk media
  caption             String?  // Caption atau keterangan gambar
 

  PostAsFeaturedImage Post[]   @relation("PostFeaturedImage")
  PostAsOgImage       Post[]   @relation("PostOgImage")
}

model Setting {
  key       String   @id
  value     String   @db.Text // Diubah ke Text agar bisa menampung custom script yang panjang
  updatedAt DateTime @updatedAt
}

model Page {
  id              String   @id @default(cuid())
  slug            String   @unique
  title           String
  content         String   @db.Text
  published       Boolean  @default(false)
  metaTitle       String?
  metaDescription String?
  schemaType      PageSchemaType? @default(WebPage)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  authorName  String
  authorEmail String
  isApproved  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  postId      String
  parentId    String?
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[] @relation("CommentReplies")
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  EDITOR
  AUTHOR
}

model PushSubscription {
  id        String   @id @default(cuid())
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
}

enum SchemaType {
  BlogPosting
  Article
  NewsArticle
  FAQPage
}

enum PageSchemaType {
  WebPage
  AboutPage
  ContactPage
  PrivacyPolicyPage
  TermsOfServicePage
}